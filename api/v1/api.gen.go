// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for PingResponseStatus.
const (
	Ok PingResponseStatus = "ok"
)

// error object for client errors
type ClientError struct {
	Description string `json:"description"`
	Error       string `json:"error"`
}

// API availability response endpoint
type PingResponse struct {
	RespondedAt *time.Time          `json:"responded_at,omitempty"`
	Status      *PingResponseStatus `json:"status,omitempty"`
	Version     *string             `json:"version,omitempty"`
}

// PingResponseStatus defines model for PingResponse.Status.
type PingResponseStatus string

// GetBadgeDynamicParams defines parameters for GetBadgeDynamic.
type GetBadgeDynamicParams struct {
	// URL of the server to fetch dynamic data from.
	Target string `form:"target" json:"target"`

	// Pongo2 format string to display for fo the badge label
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Pongo2 format string to display for fo the badge message
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// Pongo2 format string to select a badge color by
	Color *string `form:"color,omitempty" json:"color,omitempty"`
}

// GetBadgePredefinedPredefinedNameParams_Params defines parameters for GetBadgePredefinedPredefinedName.
type GetBadgePredefinedPredefinedNameParams_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GetBadgePredefinedPredefinedNameParams defines parameters for GetBadgePredefinedPredefinedName.
type GetBadgePredefinedPredefinedNameParams struct {
	// Predefined badges may define custom parameters to control templating.
	Params *GetBadgePredefinedPredefinedNameParams_Params `form:"params,omitempty" json:"params,omitempty"`
}

// GetBadgeStaticParams defines parameters for GetBadgeStatic.
type GetBadgeStaticParams struct {
	// Pongo2 format string to display for fo the badge label
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Pongo2 format string to display for fo the badge message
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// Pongo2 format string to select a badge color by
	Color *string `form:"color,omitempty" json:"color,omitempty"`
}

// Getter for additional properties for GetBadgePredefinedPredefinedNameParams_Params. Returns the specified
// element and whether it was found
func (a GetBadgePredefinedPredefinedNameParams_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GetBadgePredefinedPredefinedNameParams_Params
func (a *GetBadgePredefinedPredefinedNameParams_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GetBadgePredefinedPredefinedNameParams_Params to handle AdditionalProperties
func (a *GetBadgePredefinedPredefinedNameParams_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GetBadgePredefinedPredefinedNameParams_Params to handle AdditionalProperties
func (a GetBadgePredefinedPredefinedNameParams_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /badge/dynamic)
	GetBadgeDynamic(ctx echo.Context, params GetBadgeDynamicParams) error

	// (GET /badge/predefined)
	GetBadgePredefined(ctx echo.Context) error

	// (GET /badge/predefined/{predefined_name}/)
	GetBadgePredefinedPredefinedName(ctx echo.Context, predefinedName string, params GetBadgePredefinedPredefinedNameParams) error

	// (GET /badge/static)
	GetBadgeStatic(ctx echo.Context, params GetBadgeStaticParams) error

	// (GET /openapi.yaml)
	GetOpenapiYaml(ctx echo.Context) error

	// (GET /ping)
	GetPing(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBadgeDynamic converts echo context to params.
func (w *ServerInterfaceWrapper) GetBadgeDynamic(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBadgeDynamicParams
	// ------------- Required query parameter "target" -------------

	err = runtime.BindQueryParameter("form", true, true, "target", ctx.QueryParams(), &params.Target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", ctx.QueryParams(), &params.Label)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter label: %s", err))
	}

	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", ctx.QueryParams(), &params.Color)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter color: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBadgeDynamic(ctx, params)
	return err
}

// GetBadgePredefined converts echo context to params.
func (w *ServerInterfaceWrapper) GetBadgePredefined(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBadgePredefined(ctx)
	return err
}

// GetBadgePredefinedPredefinedName converts echo context to params.
func (w *ServerInterfaceWrapper) GetBadgePredefinedPredefinedName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "predefined_name" -------------
	var predefinedName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "predefined_name", runtime.ParamLocationPath, ctx.Param("predefined_name"), &predefinedName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter predefined_name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBadgePredefinedPredefinedNameParams
	// ------------- Optional query parameter "params" -------------

	err = runtime.BindQueryParameter("form", true, false, "params", ctx.QueryParams(), &params.Params)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter params: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBadgePredefinedPredefinedName(ctx, predefinedName, params)
	return err
}

// GetBadgeStatic converts echo context to params.
func (w *ServerInterfaceWrapper) GetBadgeStatic(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBadgeStaticParams
	// ------------- Optional query parameter "label" -------------

	err = runtime.BindQueryParameter("form", true, false, "label", ctx.QueryParams(), &params.Label)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter label: %s", err))
	}

	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// ------------- Optional query parameter "color" -------------

	err = runtime.BindQueryParameter("form", true, false, "color", ctx.QueryParams(), &params.Color)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter color: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBadgeStatic(ctx, params)
	return err
}

// GetOpenapiYaml converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiYaml(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiYaml(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/badge/dynamic", wrapper.GetBadgeDynamic)
	router.GET(baseURL+"/badge/predefined", wrapper.GetBadgePredefined)
	router.GET(baseURL+"/badge/predefined/:predefined_name/", wrapper.GetBadgePredefinedPredefinedName)
	router.GET(baseURL+"/badge/static", wrapper.GetBadgeStatic)
	router.GET(baseURL+"/openapi.yaml", wrapper.GetOpenapiYaml)
	router.GET(baseURL+"/ping", wrapper.GetPing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTXPbNhD9K1u0tyqikvaQ4S1tOh1PW8fjuodO7MlAwJJEAgIIsFSt8ei/dxYkTcm0",
	"bE/b9JKcROFj8R727QNwI5Rvg3foKInyRiTVYCvz54/WoKOfYvSR/2pMKppAxjtRCuRm8Ov3qAgqH0Hl",
	"0ZDbk1iIEH3ASAbTbPKNoG1AUYpE0bha7BZ9uHt6dgsR8WNnImpRvj0IM066WoyTejQc7sy4+hxT8C7h",
	"HPursxOQG2msXBtraAtxGArodPDG0Qx/P0KjfieJ/1c+tvwltCR8RqZFsZizSiSpy/PRdS0T8B/28E4D",
	"NxjT/Vuzm7HjJuMqP+d16p+dMg1mspa6RqjRYZTkIySMG6NwCScapc0Z8+5ZiNiahAkan8i4+qtL3ldr",
	"FA4b52TLa/92csEwyZDlvzk4RxR70MXz5Wq54mE+oJPBiFJ8l5sWIkhq8j4UeWqht062RnFLjTRn8nOP",
	"G0HCMHQgtJYJNXgH1CCkLgRrUEOQUbZIGNMSXt2ZYRKsO2MJquhb0JIkVEiqQZ1bLp0EkrFGguS7qBCk",
	"0xC8q/0L6LNMqCGi08gZgT4xaZl3iiUiGfOJzqjpB17z9cCOeY/ARPn2Lsk/zn8FX/VMMG4wAvke2y2F",
	"Hm707VJw0kUpPnYYt2IxJqaHLvarhGKHi6GO7xXUXRxn+2QHfgxFmxSs3GatVD7j7LfUyjXaI4DGvk+5",
	"fospyRqPIJh6/wMMCS0bnBxWVt76COvtkaVz94MLXy3EaDa5Hl6sVvyjvCN0uRBMK2ss0qb+9rq1onSd",
	"tbvFHbTnSF10adoSrrrvZ6Ekl4fK+izep95eJmjfRKxEKb4upgOgGNy/2Lf+bDiH6/fdMPYvBMmaFS4G",
	"v0Fxxa1DsYeIGivjWJxH6v31kGomZE0irotpWs8x5cqkBk2cCh724nBNnk2TptoDGREwJXRkpLXbQ4dI",
	"8JehBipzjRoI22AljYvl6kpLuGhMYifpElZdds9LZ5yync6WgCoiJdaLVApTGt32QZeYoIrPWhTFzfT9",
	"jgtpVzzlXOCz9cnHwpPSMH2dynyeP+jeFw3OJAoMn2UQcy5AQjYI1sutgfNRODnGHer/0shnFdPKLfRN",
	"oLpEvt2vCvLAuojejrI3rmaceB2s1zgiuM/pcph0YHVSa8NApD3buzr1IWYXtETbfJNgwxWfpSv2+v0/",
	"lf57v+Ijuv5yG/hyG/g0uh+eBcutZCpHdD84J/GBO0yAFFCZasB+n7zf9AP/5MCPbinhNRUbp29xHM/P",
	"jOqbXw4INmjDQC7wjGOkhuvA4aNTNag+7L84Z7T4Ffs4n3+e14NX8uNsh9fsVR7Zv1h6A+miFaVoiEJZ",
	"FNYrafk5Wb5cvVwVMphi81zsrnZ/BwAA//9E954wahAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
